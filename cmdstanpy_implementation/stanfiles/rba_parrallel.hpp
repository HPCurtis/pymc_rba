// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace rba_parrallel_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 72> locations_array__ =
  {" (found before start of program)",
  " (in 'rba_parrallel.stan', line 56, column 2 to column 24)",
  " (in 'rba_parrallel.stan', line 57, column 2 to column 30)",
  " (in 'rba_parrallel.stan', line 58, column 2 to column 13)",
  " (in 'rba_parrallel.stan', line 59, column 2 to column 18)",
  " (in 'rba_parrallel.stan', line 60, column 2 to column 21)",
  " (in 'rba_parrallel.stan', line 61, column 2 to column 24)",
  " (in 'rba_parrallel.stan', line 62, column 2 to column 30)",
  " (in 'rba_parrallel.stan', line 63, column 2 to column 24)",
  " (in 'rba_parrallel.stan', line 67, column 2 to column 48)",
  " (in 'rba_parrallel.stan', line 68, column 2 to column 38)",
  " (in 'rba_parrallel.stan', line 69, column 2 to line 70, column 45)",
  " (in 'rba_parrallel.stan', line 71, column 2 to line 72, column 45)",
  " (in 'rba_parrallel.stan', line 73, column 2 to line 74, column 45)",
  " (in 'rba_parrallel.stan', line 75, column 2 to column 44)",
  " (in 'rba_parrallel.stan', line 76, column 2 to column 45)",
  " (in 'rba_parrallel.stan', line 77, column 2 to column 33)",
  " (in 'rba_parrallel.stan', line 80, column 9 to column 15)",
  " (in 'rba_parrallel.stan', line 80, column 2 to column 19)",
  " (in 'rba_parrallel.stan', line 81, column 9 to column 14)",
  " (in 'rba_parrallel.stan', line 81, column 16 to column 17)",
  " (in 'rba_parrallel.stan', line 81, column 2 to column 22)",
  " (in 'rba_parrallel.stan', line 82, column 2 to column 18)",
  " (in 'rba_parrallel.stan', line 83, column 2 to column 58)",
  " (in 'rba_parrallel.stan', line 85, column 2 to line 86, column 61)",
  " (in 'rba_parrallel.stan', line 32, column 2 to column 17)",
  " (in 'rba_parrallel.stan', line 33, column 2 to column 17)",
  " (in 'rba_parrallel.stan', line 34, column 2 to column 22)",
  " (in 'rba_parrallel.stan', line 35, column 2 to column 21)",
  " (in 'rba_parrallel.stan', line 36, column 2 to column 17)",
  " (in 'rba_parrallel.stan', line 37, column 2 to column 18)",
  " (in 'rba_parrallel.stan', line 38, column 2 to column 16)",
  " (in 'rba_parrallel.stan', line 39, column 9 to column 10)",
  " (in 'rba_parrallel.stan', line 39, column 2 to column 14)",
  " (in 'rba_parrallel.stan', line 40, column 9 to column 10)",
  " (in 'rba_parrallel.stan', line 40, column 12 to column 13)",
  " (in 'rba_parrallel.stan', line 40, column 2 to column 17)",
  " (in 'rba_parrallel.stan', line 41, column 8 to column 9)",
  " (in 'rba_parrallel.stan', line 41, column 2 to column 43)",
  " (in 'rba_parrallel.stan', line 42, column 8 to column 9)",
  " (in 'rba_parrallel.stan', line 42, column 2 to column 41)",
  " (in 'rba_parrallel.stan', line 46, column 9 to column 10)",
  " (in 'rba_parrallel.stan', line 46, column 12 to column 14)",
  " (in 'rba_parrallel.stan', line 46, column 2 to column 19)",
  " (in 'rba_parrallel.stan', line 47, column 9 to column 11)",
  " (in 'rba_parrallel.stan', line 47, column 2 to column 21)",
  " (in 'rba_parrallel.stan', line 48, column 8 to column 9)",
  " (in 'rba_parrallel.stan', line 48, column 2 to column 36)",
  " (in 'rba_parrallel.stan', line 50, column 4 to column 34)",
  " (in 'rba_parrallel.stan', line 51, column 4 to column 42)",
  " (in 'rba_parrallel.stan', line 49, column 17 to line 52, column 3)",
  " (in 'rba_parrallel.stan', line 49, column 2 to line 52, column 3)",
  " (in 'rba_parrallel.stan', line 57, column 20 to column 21)",
  " (in 'rba_parrallel.stan', line 59, column 9 to column 11)",
  " (in 'rba_parrallel.stan', line 60, column 9 to column 15)",
  " (in 'rba_parrallel.stan', line 61, column 9 to column 10)",
  " (in 'rba_parrallel.stan', line 61, column 12 to column 17)",
  " (in 'rba_parrallel.stan', line 62, column 23 to column 24)",
  " (in 'rba_parrallel.stan', line 10, column 10 to column 25)",
  " (in 'rba_parrallel.stan', line 10, column 4 to column 35)",
  " (in 'rba_parrallel.stan', line 12, column 6 to column 29)",
  " (in 'rba_parrallel.stan', line 11, column 35 to line 13, column 5)",
  " (in 'rba_parrallel.stan', line 11, column 4 to line 13, column 5)",
  " (in 'rba_parrallel.stan', line 14, column 4 to column 15)",
  " (in 'rba_parrallel.stan', line 9, column 43 to line 15, column 3)",
  " (in 'rba_parrallel.stan', line 22, column 4 to column 21)",
  " (in 'rba_parrallel.stan', line 23, column 4 to column 28)",
  " (in 'rba_parrallel.stan', line 25, column 11 to column 12)",
  " (in 'rba_parrallel.stan', line 25, column 4 to column 114)",
  " (in 'rba_parrallel.stan', line 26, column 4 to column 81)",
  " (in 'rba_parrallel.stan', line 27, column 4 to column 19)",
  " (in 'rba_parrallel.stan', line 20, column 25 to line 28, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>* = nullptr>
std::vector<int>
sequence(const T0__& start, const T1__& end, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T11__, typename T12__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              std::is_integral<T1__>, std::is_integral<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              stan::math::disjunction<stan::is_autodiff<T8__>,
                                                      std::is_floating_point<T8__>>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_eigen_matrix_dynamic<T12__>,
                              stan::is_vt_not_complex<T12__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
  stan::base_type_t<T5__>, stan::base_type_t<T6__>, T7__,
  stan::promote_args_t<T8__, stan::base_type_t<T11__>,
    stan::base_type_t<T12__>>>
partial_log_lik_lpmf(const T0__& seq, const T1__& start, const T2__& end,
                     const T3__& y_arg__, const T4__& X_arg__, const T5__&
                     Xc_arg__, const T6__& beta_arg__, const T7__& alpha,
                     const T8__& sigma, const std::vector<int>& subj,
                     const std::vector<int>& ROI, const T11__& u_arg__,
                     const T12__& u2_arg__, std::ostream* pstream__);
template <bool propto__>
struct partial_log_lik_lpmf_rsfunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            typename T8__, typename T11__, typename T12__,
            stan::require_all_t<stan::is_std_vector<T0__>,
                                std::is_integral<stan::value_type_t<T0__>>,
                                std::is_integral<T1__>,
                                std::is_integral<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_eigen_matrix_dynamic<T4__>,
                                stan::is_vt_not_complex<T4__>,
                                stan::is_eigen_matrix_dynamic<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_col_vector<T6__>,
                                stan::is_vt_not_complex<T6__>,
                                stan::math::disjunction<stan::is_autodiff<T7__>,
                                                        std::is_floating_point<T7__>>,
                                stan::math::disjunction<stan::is_autodiff<T8__>,
                                                        std::is_floating_point<T8__>>,
                                stan::is_col_vector<T11__>,
                                stan::is_vt_not_complex<T11__>,
                                stan::is_eigen_matrix_dynamic<T12__>,
                                stan::is_vt_not_complex<T12__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
    stan::base_type_t<T5__>, stan::base_type_t<T6__>, T7__,
    stan::promote_args_t<T8__, stan::base_type_t<T11__>,
      stan::base_type_t<T12__>>>
  operator()(const T0__& seq, const T1__& start, const T2__& end,
             std::ostream* pstream__, const T3__& y, const T4__& X,
             const T5__& Xc, const T6__& beta, const T7__& alpha, const T8__&
             sigma, const std::vector<int>& subj, const std::vector<int>&
             ROI, const T11__& u, const T12__& u2) const {
    return partial_log_lik_lpmf<propto__>(seq, (start + 1), (end + 1), y, X,
             Xc, beta, alpha, sigma, subj, ROI, u, u2, pstream__);
  }
};
// array[] int sequence(int, int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>*>
std::vector<int>
sequence(const T0__& start, const T1__& end, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 58;
    stan::math::validate_non_negative_index("seq", "end - start + 1", ((end -
      start) + 1));
    std::vector<int> seq =
      std::vector<int>(((end - start) + 1), std::numeric_limits<int>::min());
    current_statement__ = 62;
    for (int n = 1; n <= stan::math::num_elements(seq); ++n) {
      current_statement__ = 60;
      stan::model::assign(seq, ((n + start) - 1), "assigning variable seq",
        stan::model::index_uni(n));
    }
    current_statement__ = 63;
    return seq;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* real
   partial_log_lik_lpmf(array[] int, int, int, data vector, data matrix,
                        data matrix, vector, real, real, data array[] int,
                        data array[] int, vector, matrix)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T11__, typename T12__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              std::is_integral<T1__>, std::is_integral<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              stan::math::disjunction<stan::is_autodiff<T8__>,
                                                      std::is_floating_point<T8__>>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_eigen_matrix_dynamic<T12__>,
                              stan::is_vt_not_complex<T12__>>*>
stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
  stan::base_type_t<T5__>, stan::base_type_t<T6__>, T7__,
  stan::promote_args_t<T8__, stan::base_type_t<T11__>,
    stan::base_type_t<T12__>>>
partial_log_lik_lpmf(const T0__& seq, const T1__& start, const T2__& end,
                     const T3__& y_arg__, const T4__& X_arg__, const T5__&
                     Xc_arg__, const T6__& beta_arg__, const T7__& alpha,
                     const T8__& sigma, const std::vector<int>& subj,
                     const std::vector<int>& ROI, const T11__& u_arg__,
                     const T12__& u2_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>, T7__,
                             stan::promote_args_t<T8__,
                               stan::base_type_t<T11__>,
                               stan::base_type_t<T12__>>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& X = stan::math::to_ref(X_arg__);
  const auto& Xc = stan::math::to_ref(Xc_arg__);
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& u = stan::math::to_ref(u_arg__);
  const auto& u2 = stan::math::to_ref(u2_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ ptarget = DUMMY_VAR__;
    current_statement__ = 65;
    ptarget = 0;
    int N = std::numeric_limits<int>::min();
    current_statement__ = 66;
    N = ((end - start) + 1);
    current_statement__ = 67;
    stan::math::validate_non_negative_index("mu", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> mu =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 68;
    stan::model::assign(mu,
      stan::math::add(
        stan::math::add(
          stan::math::add(alpha,
            stan::model::rvalue(u, "u",
              stan::model::index_multi(
                stan::model::rvalue(subj, "subj",
                  stan::model::index_min_max(start, end))))),
          stan::model::rvalue(u2, "u2",
            stan::model::index_multi(
              stan::model::rvalue(ROI, "ROI",
                stan::model::index_min_max(start, end))),
            stan::model::index_uni(1))),
        stan::math::elt_multiply(
          stan::model::rvalue(
            stan::model::rvalue(X, "X", stan::model::index_omni(),
              stan::model::index_uni(2)), "X[:, 2]",
            stan::model::index_min_max(start, end)),
          stan::model::rvalue(u2, "u2",
            stan::model::index_multi(
              stan::model::rvalue(ROI, "ROI",
                stan::model::index_min_max(start, end))),
            stan::model::index_uni(2)))), "assigning variable mu");
    current_statement__ = 69;
    ptarget = (ptarget +
      stan::math::normal_id_glm_lpdf<false>(
        stan::model::rvalue(y, "y", stan::model::index_min_max(start, end)),
        stan::model::rvalue(Xc, "Xc", stan::model::index_min_max(start, end)),
        mu, beta, sigma));
    current_statement__ = 70;
    return ptarget;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class rba_parrallel_model final : public model_base_crtp<rba_parrallel_model> {
 private:
  int N;
  int J;
  int N_subj;
  int N_ROI;
  int K;
  int Kc;
  int grainsize;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  std::vector<int> subj;
  std::vector<int> ROI;
  Eigen::Matrix<double,-1,-1> Xc_data__;
  Eigen::Matrix<double,-1,1> means_X_data__;
  std::vector<int> seq;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xc{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> means_X{nullptr, 0};
 public:
  ~rba_parrallel_model() {}
  rba_parrallel_model(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "rba_parrallel_model_namespace::rba_parrallel_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 25;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 26;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "N_subj", "int",
        std::vector<size_t>{});
      N_subj = std::numeric_limits<int>::min();
      current_statement__ = 27;
      N_subj = context__.vals_i("N_subj")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "N_subj", N_subj, 1);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "N_ROI", "int",
        std::vector<size_t>{});
      N_ROI = std::numeric_limits<int>::min();
      current_statement__ = 28;
      N_ROI = context__.vals_i("N_ROI")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "N_ROI", N_ROI, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 29;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "Kc", "int",
        std::vector<size_t>{});
      Kc = std::numeric_limits<int>::min();
      current_statement__ = 30;
      Kc = context__.vals_i("Kc")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "Kc", Kc, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "grainsize", "int",
        std::vector<size_t>{});
      grainsize = std::numeric_limits<int>::min();
      current_statement__ = 31;
      grainsize = context__.vals_i("grainsize")[(1 - 1)];
      current_statement__ = 32;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 33;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 36;
        X_flat__ = context__.vals_r("X");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("subj", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "subj", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      subj = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 38;
      subj = context__.vals_i("subj");
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "subj", subj, 1);
      current_statement__ = 38;
      stan::math::check_less_or_equal(function__, "subj", subj, N_subj);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("ROI", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "ROI", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      ROI = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 40;
      ROI = context__.vals_i("ROI");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "ROI", ROI, 1);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "ROI", ROI, N_ROI);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("Xc", "N", N);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("Xc", "Kc", Kc);
      current_statement__ = 43;
      Xc_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Kc,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Xc) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xc_data__.data(), N,
        Kc);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("means_X", "Kc", Kc);
      current_statement__ = 45;
      means_X_data__ = Eigen::Matrix<double,-1,1>::Constant(Kc,
                         std::numeric_limits<double>::quiet_NaN());
      new (&means_X)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(means_X_data__.data(), Kc);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("seq", "N", N);
      current_statement__ = 47;
      seq = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 47;
      stan::model::assign(seq, sequence(1, N, pstream__),
        "assigning variable seq");
      current_statement__ = 51;
      for (int i = 2; i <= K; ++i) {
        current_statement__ = 48;
        stan::model::assign(means_X,
          stan::math::mean(
            stan::model::rvalue(X, "X", stan::model::index_omni(),
              stan::model::index_uni(i))), "assigning variable means_X",
          stan::model::index_uni((i - 1)));
        current_statement__ = 49;
        stan::model::assign(Xc,
          stan::math::subtract(
            stan::model::rvalue(X, "X", stan::model::index_omni(),
              stan::model::index_uni(i)),
            stan::model::rvalue(means_X, "means_X",
              stan::model::index_uni((i - 1)))), "assigning variable Xc",
          stan::model::index_omni(), stan::model::index_uni((i - 1)));
      }
      current_statement__ = 52;
      stan::math::validate_non_negative_index("tau_u2", "J", J);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("beta", "Kc", Kc);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("z_u", "N_subj", N_subj);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("z_u2", "J", J);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("z_u2", "N_ROI", N_ROI);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("L_u", "J", J);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("L_u", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + J + 1 + Kc + N_subj + (J * N_ROI) + ((J * (J - 1)) /
      2) + 1;
  }
  inline std::string model_name() const final {
    return "rba_parrallel_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=rba_parrallel.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "rba_parrallel_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ tau_u = DUMMY_VAR__;
      current_statement__ = 1;
      tau_u = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_u2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      tau_u2 = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 J);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      current_statement__ = 4;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc);
      Eigen::Matrix<local_scalar_t__,-1,1> z_u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_subj, DUMMY_VAR__);
      current_statement__ = 5;
      z_u = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_subj);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_u2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, N_ROI,
          DUMMY_VAR__);
      current_statement__ = 6;
      z_u2 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J,
               N_ROI);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_u =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 7;
      L_u = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, J);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 9;
        lp_accum__.add(stan::math::student_t_lpdf<false>(alpha, 3, 0.1, 2.5));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<false>(beta, 0, 10));
        current_statement__ = 11;
        lp_accum__.add((stan::math::student_t_lpdf<false>(sigma, 3, 0, 2.5) -
          stan::math::student_t_lccdf(0, 3, 0, 2.5)));
        current_statement__ = 12;
        lp_accum__.add((stan::math::student_t_lpdf<false>(tau_u, 3, 0, 2.5) -
          stan::math::student_t_lccdf(0, 3, 0, 2.5)));
        current_statement__ = 13;
        lp_accum__.add((stan::math::student_t_lpdf<false>(tau_u2, 3, 0, 2.5)
          - stan::math::student_t_lccdf(0, 3, 0, 2.5)));
        current_statement__ = 14;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<false>(L_u, 1));
        current_statement__ = 15;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(
                         stan::math::to_vector(z_u2)));
        current_statement__ = 16;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(z_u));
        current_statement__ = 17;
        stan::math::validate_non_negative_index("u", "N_subj", N_subj);
        Eigen::Matrix<local_scalar_t__,-1,1> u =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_subj, DUMMY_VAR__);
        current_statement__ = 19;
        stan::math::validate_non_negative_index("u2", "N_ROI", N_ROI);
        current_statement__ = 20;
        stan::math::validate_non_negative_index("u2", "J", J);
        Eigen::Matrix<local_scalar_t__,-1,-1> u2 =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_ROI, J,
            DUMMY_VAR__);
        current_statement__ = 22;
        stan::model::assign(u, stan::math::multiply(z_u, tau_u),
          "assigning variable u");
        current_statement__ = 23;
        stan::model::assign(u2,
          stan::math::transpose(
            stan::math::multiply(stan::math::diag_pre_multiply(tau_u2, L_u),
              z_u2)), "assigning variable u2");
        current_statement__ = 24;
        lp_accum__.add(stan::math::reduce_sum<partial_log_lik_lpmf_rsfunctor__<false>>(
                         seq, grainsize, pstream__, y, X, Xc, beta, alpha,
                         sigma, subj, ROI, u, u2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "rba_parrallel_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ tau_u = DUMMY_VAR__;
      current_statement__ = 1;
      tau_u = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_u2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      tau_u2 = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 J);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      current_statement__ = 4;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc);
      Eigen::Matrix<local_scalar_t__,-1,1> z_u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_subj, DUMMY_VAR__);
      current_statement__ = 5;
      z_u = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_subj);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_u2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, N_ROI,
          DUMMY_VAR__);
      current_statement__ = 6;
      z_u2 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J,
               N_ROI);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_u =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 7;
      L_u = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, J);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 9;
        lp_accum__.add(stan::math::student_t_lpdf<false>(alpha, 3, 0.1, 2.5));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<false>(beta, 0, 10));
        current_statement__ = 11;
        lp_accum__.add((stan::math::student_t_lpdf<false>(sigma, 3, 0, 2.5) -
          stan::math::student_t_lccdf(0, 3, 0, 2.5)));
        current_statement__ = 12;
        lp_accum__.add((stan::math::student_t_lpdf<false>(tau_u, 3, 0, 2.5) -
          stan::math::student_t_lccdf(0, 3, 0, 2.5)));
        current_statement__ = 13;
        lp_accum__.add((stan::math::student_t_lpdf<false>(tau_u2, 3, 0, 2.5)
          - stan::math::student_t_lccdf(0, 3, 0, 2.5)));
        current_statement__ = 14;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<false>(L_u, 1));
        current_statement__ = 15;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(
                         stan::math::to_vector(z_u2)));
        current_statement__ = 16;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(z_u));
        current_statement__ = 17;
        stan::math::validate_non_negative_index("u", "N_subj", N_subj);
        Eigen::Matrix<local_scalar_t__,-1,1> u =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_subj, DUMMY_VAR__);
        current_statement__ = 19;
        stan::math::validate_non_negative_index("u2", "N_ROI", N_ROI);
        current_statement__ = 20;
        stan::math::validate_non_negative_index("u2", "J", J);
        Eigen::Matrix<local_scalar_t__,-1,-1> u2 =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_ROI, J,
            DUMMY_VAR__);
        current_statement__ = 22;
        stan::model::assign(u, stan::math::multiply(z_u, tau_u),
          "assigning variable u");
        current_statement__ = 23;
        stan::model::assign(u2,
          stan::math::transpose(
            stan::math::multiply(stan::math::diag_pre_multiply(tau_u2, L_u),
              z_u2)), "assigning variable u2");
        current_statement__ = 24;
        lp_accum__.add(stan::math::reduce_sum<partial_log_lik_lpmf_rsfunctor__<false>>(
                         seq, grainsize, pstream__, y, X, Xc, beta, alpha,
                         sigma, subj, ROI, u, u2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "rba_parrallel_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double tau_u = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      tau_u = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> tau_u2 =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      tau_u2 = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 J);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(Kc,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc);
      Eigen::Matrix<double,-1,1> z_u =
        Eigen::Matrix<double,-1,1>::Constant(N_subj,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      z_u = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_subj);
      Eigen::Matrix<double,-1,-1> z_u2 =
        Eigen::Matrix<double,-1,-1>::Constant(J, N_ROI,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      z_u2 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J,
               N_ROI);
      Eigen::Matrix<double,-1,-1> L_u =
        Eigen::Matrix<double,-1,-1>::Constant(J, J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      L_u = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, J);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      out__.write(tau_u);
      out__.write(tau_u2);
      out__.write(alpha);
      out__.write(beta);
      out__.write(z_u);
      out__.write(z_u2);
      out__.write(L_u);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ tau_u = DUMMY_VAR__;
      current_statement__ = 1;
      tau_u = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_u);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_u2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(tau_u2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable tau_u2");
      out__.write_free_lb(0, tau_u2);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> z_u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_subj, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(z_u,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_subj),
        "assigning variable z_u");
      out__.write(z_u);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_u2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, N_ROI,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(z_u2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, N_ROI),
        "assigning variable z_u2");
      out__.write(z_u2);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_u =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(L_u,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, J),
        "assigning variable L_u");
      out__.write_free_cholesky_factor_corr(L_u);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 8;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "tau_u", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "tau_u2", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(Kc)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "z_u", "double",
        std::vector<size_t>{static_cast<size_t>(N_subj)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "z_u2", "double",
        std::vector<size_t>{static_cast<size_t>(J),
          static_cast<size_t>(N_ROI)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "L_u", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(J)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ tau_u = DUMMY_VAR__;
      current_statement__ = 1;
      tau_u = context__.vals_r("tau_u")[(1 - 1)];
      out__.write_free_lb(0, tau_u);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_u2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_u2_flat__;
        current_statement__ = 2;
        tau_u2_flat__ = context__.vals_r("tau_u2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          stan::model::assign(tau_u2, tau_u2_flat__[(pos__ - 1)],
            "assigning variable tau_u2", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, tau_u2);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 3;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 4;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> z_u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_subj, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_u_flat__;
        current_statement__ = 5;
        z_u_flat__ = context__.vals_r("z_u");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_subj; ++sym1__) {
          stan::model::assign(z_u, z_u_flat__[(pos__ - 1)],
            "assigning variable z_u", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_u);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_u2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, N_ROI,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_u2_flat__;
        current_statement__ = 6;
        z_u2_flat__ = context__.vals_r("z_u2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_ROI; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            stan::model::assign(z_u2, z_u2_flat__[(pos__ - 1)],
              "assigning variable z_u2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(z_u2);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_u =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_u_flat__;
        current_statement__ = 7;
        L_u_flat__ = context__.vals_r("L_u");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            stan::model::assign(L_u, L_u_flat__[(pos__ - 1)],
              "assigning variable L_u", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L_u);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 8;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"tau_u", "tau_u2", "alpha", "beta",
                "z_u", "z_u2", "L_u", "sigma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(Kc)},
                std::vector<size_t>{static_cast<size_t>(N_subj)},
                std::vector<size_t>{static_cast<size_t>(J),
                  static_cast<size_t>(N_ROI)},
                std::vector<size_t>{static_cast<size_t>(J),
                  static_cast<size_t>(J)}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "tau_u");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_u2" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_subj; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_ROI; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_u2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_u" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "tau_u");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_u2" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_subj; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_ROI; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_u2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((J * (J - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_u" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"tau_u\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_u2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kc) + "},\"block\":\"parameters\"},{\"name\":\"z_u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_subj) + "},\"block\":\"parameters\"},{\"name\":\"z_u2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(N_ROI) + "},\"block\":\"parameters\"},{\"name\":\"L_u\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"tau_u\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_u2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kc) + "},\"block\":\"parameters\"},{\"name\":\"z_u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_subj) + "},\"block\":\"parameters\"},{\"name\":\"z_u2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(N_ROI) + "},\"block\":\"parameters\"},{\"name\":\"L_u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((J * (J - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + J) + 1) + Kc) + N_subj) + (J *
      N_ROI)) + (J * J)) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + J) + 1) + Kc) + N_subj) + (J *
      N_ROI)) + (J * J)) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = rba_parrallel_model_namespace::rba_parrallel_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return rba_parrallel_model_namespace::profiles__;
}
#endif